/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface LiskButtonSend {
      'amount': number;
      'buttonTitle': string;
      'classNames': string;
      'recipient': string;
    }
  }

  interface HTMLLiskButtonSendElement extends StencilComponents.LiskButtonSend, HTMLStencilElement {}

  var HTMLLiskButtonSendElement: {
    prototype: HTMLLiskButtonSendElement;
    new (): HTMLLiskButtonSendElement;
  };
  interface HTMLElementTagNameMap {
    'lisk-button-send': HTMLLiskButtonSendElement;
  }
  interface ElementTagNameMap {
    'lisk-button-send': HTMLLiskButtonSendElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lisk-button-send': JSXElements.LiskButtonSendAttributes;
    }
  }
  namespace JSXElements {
    export interface LiskButtonSendAttributes extends HTMLAttributes {
      'amount'?: number;
      'buttonTitle'?: string;
      'classNames'?: string;
      'recipient'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LiskButtonSign {
      'buttonTitle': string;
      'classNames': string;
      'message': string;
      'sourceId': string;
      'type': string;
    }
  }

  interface HTMLLiskButtonSignElement extends StencilComponents.LiskButtonSign, HTMLStencilElement {}

  var HTMLLiskButtonSignElement: {
    prototype: HTMLLiskButtonSignElement;
    new (): HTMLLiskButtonSignElement;
  };
  interface HTMLElementTagNameMap {
    'lisk-button-sign': HTMLLiskButtonSignElement;
  }
  interface ElementTagNameMap {
    'lisk-button-sign': HTMLLiskButtonSignElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lisk-button-sign': JSXElements.LiskButtonSignAttributes;
    }
  }
  namespace JSXElements {
    export interface LiskButtonSignAttributes extends HTMLAttributes {
      'buttonTitle'?: string;
      'classNames'?: string;
      'message'?: string;
      'sourceId'?: string;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LiskButtonVote {
      'buttonTitle': string;
      'classNames': string;
      'unvotes': string;
      'votes': string;
    }
  }

  interface HTMLLiskButtonVoteElement extends StencilComponents.LiskButtonVote, HTMLStencilElement {}

  var HTMLLiskButtonVoteElement: {
    prototype: HTMLLiskButtonVoteElement;
    new (): HTMLLiskButtonVoteElement;
  };
  interface HTMLElementTagNameMap {
    'lisk-button-vote': HTMLLiskButtonVoteElement;
  }
  interface ElementTagNameMap {
    'lisk-button-vote': HTMLLiskButtonVoteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lisk-button-vote': JSXElements.LiskButtonVoteAttributes;
    }
  }
  namespace JSXElements {
    export interface LiskButtonVoteAttributes extends HTMLAttributes {
      'buttonTitle'?: string;
      'classNames'?: string;
      'unvotes'?: string;
      'votes'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LiskButton {

    }
  }

  interface HTMLLiskButtonElement extends StencilComponents.LiskButton, HTMLStencilElement {}

  var HTMLLiskButtonElement: {
    prototype: HTMLLiskButtonElement;
    new (): HTMLLiskButtonElement;
  };
  interface HTMLElementTagNameMap {
    'lisk-button': HTMLLiskButtonElement;
  }
  interface ElementTagNameMap {
    'lisk-button': HTMLLiskButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lisk-button': JSXElements.LiskButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface LiskButtonAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;